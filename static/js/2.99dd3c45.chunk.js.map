{"version":3,"sources":["mdx lazy /^/.//.*/.mdx$/ groupOptions: {} namespace object","components/MyMdx.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","headers","type","props","Typography","variant","components","h1","h2","h3","h4","h5","h6","a","Link","MyMDX","source","rest","loading","useState","doc","setDoc","useEffect","canceled","window","default","fetch","text","alert"],"mappings":"iJAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,KAGRL,EAAyBQ,KAAO,WAAa,MAAO,IACpDR,EAAyBG,QAAUH,EACnCS,EAAOC,QAAUV,EACjBA,EAAyBW,GAAK,M,qKCRxBC,EAAWC,GAAUC,GAAU,kBAACC,EAAA,EAAD,eAAYC,QAASH,GAAUC,IAE9DG,EAAa,CACjBC,GAAIN,EAAQ,MACZO,GAAIP,EAAQ,MACZQ,GAAIR,EAAQ,MACZS,GAAIT,EAAQ,MACZU,GAAIV,EAAQ,MACZW,GAAIX,EAAQ,MACZY,EAAIV,GAAU,kBAACW,EAAA,EAASX,IA6BXY,EA1BA,IAAuD,IAArDC,EAAoD,EAApDA,OAAyCC,GAAW,EAA5CC,QAA4C,uCAC7CC,qBAD6C,mBAC5DC,EAD4D,KACvDC,EADuD,KAmBnE,OAjBAC,oBAAU,KACR,IAAIC,EAaJ,OAZA,sBAAC,sBAAAV,EAAA,uEAEGU,EAFH,kCAGKF,EAHL,KAKeG,OALf,SAKmC,QAAO,YAAUR,EAAjB,SALnC,0BAKmES,QALnE,eAKsBC,MALtB,gDAMSC,OANT,6FASGJ,GAAYC,OAAOI,MAAP,gCAAsCZ,IATrD,yDAAD,GAYO,IAAOO,GAAW,GACxB,CAACP,IAGF,kBAAC,IAAD,eAAKV,WAAYA,GAAgBW,GAC9BG","file":"static/js/2.99dd3c45.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1476;","import React, { useState, useEffect } from 'react';\nimport Mdx from '@mdx-js/runtime';\nimport { Typography, Link } from '@material-ui/core';\n\nconst headers = (type) => (props) => <Typography variant={type} {...props} />;\n\nconst components = {\n  h1: headers('h1'),\n  h2: headers('h2'),\n  h3: headers('h3'),\n  h4: headers('h4'),\n  h5: headers('h5'),\n  h6: headers('h6'),\n  a: (props) => <Link {...props} />\n};\n\nconst MyMDX = ({ source, loading = 'Loading Markdown', ...rest }) => {\n  const [doc, setDoc] = useState();\n  useEffect(() => {\n    let canceled;\n    (async () => {\n      try {\n        canceled ||\n          setDoc(\n            await (\n              await window.fetch((await import(`../mdx/${source}.mdx`)).default)\n            ).text()\n          );\n      } catch {\n        canceled || window.alert(`Couldn't retrieve mdx ${source}`);\n      }\n    })();\n    return () => (canceled = true);\n  }, [source]);\n\n  return (\n    <Mdx components={components} {...rest}>\n      {doc}\n    </Mdx>\n  );\n};\n\nexport default MyMDX;\n"],"sourceRoot":""}